<!-- BEGIN_INCLUDE(linkedin:getProfileForCurrentUser) -->
String accessToken = ...
String accessTokenSecret = ...
List<ProfileField> profileFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Person response = linkedin.getProfileForCurrentUser(accessToken, accessTokenSecret, profileFields);
<!-- END_INCLUDE(linkedin:getProfileForCurrentUser) -->

<!-- BEGIN_INCLUDE(linkedin:getProfileById) -->
String accessToken = ...
String accessTokenSecret = ..
String id = ...
List<ProfileField> profileFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Person response = linkedin.getProfileById(accessToken, accessTokenSecret, id, profileFields);
<!-- END_INCLUDE(linkedin:getProfileById) -->

<!-- BEGIN_INCLUDE(linkedin:getProfileByUrl) -->
String accessToken = ...
String accessTokenSecret = ..
String url = ...
ProfileType profileType = ...
List<ProfileField> profileFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Person response = linkedin.getProfileByUrl(accessToken, accessTokenSecret, url, profileType, profileFields);
<!-- END_INCLUDE(linkedin:getProfileByUrl) -->

<!-- BEGIN_INCLUDE(linkedin:getNetworkUpdates) -->
String accessToken = ...
String accessTokenSecret = ..
List<NetworkUpdateType> updateTypes = ...
Integer start = ...
Integer count = ...
Date startDate = ...
Date endDate = ...
Boolean showHiddenMembers
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getNetworkUpdates(accessToken, accessTokenSecret, updateTypes, start, count, startDate, endDate, showHiddenMembers);
<!-- END_INCLUDE(linkedin:getNetworkUpdates) -->

<!-- BEGIN_INCLUDE(linkedin:getUserUpdates) -->
String accessToken = ...
String accessTokenSecret = ...
List<NetworkUpdateType> updateTypes = ...
Integer start = ...
Integer count = ...
Date startDate = ...
Date endDate = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getUserUpdates(accessToken, accessTokenSecret, updateTypes, start, count, startDate, endDate);
<!-- END_INCLUDE(linkedin:getUserUpdates) -->

<!-- BEGIN_INCLUDE(linkedin:getUserUpdatesById) -->
String accessToken = ...
String accessTokenSecret = ...
String id = ...
List<NetworkUpdateType> updateTypes = ...
Integer start = ...
Integer count = ...
Date startDate = ...
Date endDate = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getUserUpdatesById(accessToken, accessTokenSecret, id, updateTypes, start, count, startDate, endDate);
<!-- END_INCLUDE(linkedin:getUserUpdatesById) -->

<!-- BEGIN_INCLUDE(linkedin:getNetworkUpdateComments) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getNetworkUpdateComments(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:getNetworkUpdateComments) -->

<!-- BEGIN_INCLUDE(linkedin:getNetworkUpdateLikes) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getNetworkUpdateLikes(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:getNetworkUpdateLikes) -->

<!-- BEGIN_INCLUDE(linkedin:getConnectionsForCurrentUser) -->
String accessToken = ...
String accessTokenSecret = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
Date modificationDate = ...
ConnectionModificationType modificationType = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getConnectionsForCurrentUser(accessToken, accessTokenSecret, profileFields, start, count, modificationDate, modificationType);
<!-- END_INCLUDE(linkedin:getConnectionsForCurrentUser) -->

<!-- BEGIN_INCLUDE(linkedin:getConnectionsById) -->
String accessToken = ...
String accessTokenSecret = ...
String id = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
Date modificationDate = ...
ConnectionModificationType modificationType = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getConnectionsById(accessToken, accessTokenSecret, id, profileFields, start, count, modificationDate, modificationType);
<!-- END_INCLUDE(linkedin:getConnectionsById) -->

<!-- BEGIN_INCLUDE(linkedin:getConnectionsByUrl) -->
String accessToken = ...
String accessTokenSecret = ...
String url = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
Date modificationDate = ...
ConnectionModificationType modificationType = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getConnectionsByUrl(accessToken, accessTokenSecret, url, profileFields, start, count, modificationDate, modificationType);
<!-- END_INCLUDE(linkedin:getConnectionsByUrl) -->

<!-- BEGIN_INCLUDE(linkedin:searchPeople) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchPeople(accessToken, accessTokenSecret, searchParameters, profileFields, start, count, sortOrder);
<!-- END_INCLUDE(linkedin:searchPeople) -->

<!-- BEGIN_INCLUDE(linkedin:searchPeopleWithFacets) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder =
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchPeopleWithFacets(accessToken, accessTokenSecret, searchParameters, profileFields, start, count, sortOrder, facets));
<!-- END_INCLUDE(linkedin:searchPeopleWithFacets) -->

<!-- BEGIN_INCLUDE(linkedin:searchPeopleWithFacetFields) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<ProfileField> profileFields = ...
List<FacetField> facetFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder =
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchPeopleWithFacetFields(accessToken, accessTokenSecret, searchParameters, profileFields, facetFields, start, count, sortOrder, facets);
<!-- END_INCLUDE(linkedin:searchPeopleWithFacetFields) -->

<!-- BEGIN_INCLUDE(linkedin:postNetworkUpdate) -->
String accessToken = ...
String accessTokenSecret = ...
String updateText = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.postNetworkUpdate(accessToken, accessTokenSecret, updateText);
<!-- END_INCLUDE(linkedin:postNetworkUpdate) -->

<!-- BEGIN_INCLUDE(linkedin:postComment) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
String commentText = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.postComment(accessToken, accessTokenSecret, networkUpdateId, commentText);
<!-- END_INCLUDE(linkedin:postComment) -->

<!-- BEGIN_INCLUDE(linkedin:likePost) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.likePost(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:likePost) -->

<!-- BEGIN_INCLUDE(linkedin:unlikePost) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.unlikePost(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:unlikePost) -->

<!-- BEGIN_INCLUDE(linkedin:sendMessage) -->
String accessToken = ...
String accessTokenSecret = ...
List<String> recipientIds = ...
String subject = ...
String message = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.sendMessage(accessToken, accessTokenSecret, recipientIds, subject, message);
<!-- END_INCLUDE(linkedin:sendMessage) -->

<!-- BEGIN_INCLUDE(linkedin:sendInviteByEmail) -->
String accessToken = ...
String accessTokenSecret = ...
String email = ...
String firstName = ...
String lastName = ...
String subject = ...
String message = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.sendInviteByEmail(accessToken, accessTokenSecret, email, firstName, lastName, subject, message);
<!-- END_INCLUDE(linkedin:sendInviteByEmail) -->

<!-- BEGIN_INCLUDE(linkedin:postShare) -->
String accessToken = ...
String accessTokenSecret = ...
String commentText = ...
String title = ...
String description = ...
String url = ...
String imageUrl = ...
VisibilityType visibility = ...
Boolean postToTwitter = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.postShare(accessToken, accessTokenSecret, commentText, title, description, url, imageUrl, visibility, postToTwitter);
<!-- END_INCLUDE(linkedin:postShare) -->

<!-- BEGIN_INCLUDE(linkedin:reShare) -->
String accessToken = ...
String accessTokenSecret = ...
String shareId = ...
String commentText = ...
VisibilityType visibility = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.reShare(accessToken, accessTokenSecret, shareId, commentText, visibility);
<!-- END_INCLUDE(linkedin:reShare) -->

<!-- BEGIN_INCLUDE(linkedin:getGroupById) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
List<GroupField> groupFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Group response = linkedin.getGroupById(accessToken, accessTokenSecret, groupId, groupFields);
<!-- END_INCLUDE(linkedin:getGroupById) -->

<!-- BEGIN_INCLUDE(linkedin:getGroupMemberships) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
List<GroupMembershipField> groupMembershipFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
GroupMemberships response = linkedin.getGroupMemberships(accessToken, accessTokenSecret, groupId, groupMembershipFields, start, count);
<!-- END_INCLUDE(linkedin:getGroupMemberships) -->


<!-- BEGIN_INCLUDE(linkedin:updateGroupMembership) -->
<!--Incorrect implementation in BaseLinkedInApiClient
String accessToken = ...
String accessTokenSecret = ..
EmailDigestFrequencyCode emailFrequency = ..
boolean showLogoInProfile = ..
boolean emailAnnouncements = ..
boolean allowMessagesFromMembers = ..
boolean emailForEveryPost = ..
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.updateGroupMembership(accessToken, accessTokenSecret, groupId, contactEmail, emailFrequency, showLogoInProfile, emailAnnouncements, allowMessagesFromMembers, emailForEveryPost);
-->
<!-- END_INCLUDE(linkedin:updateGroupMembership) -->

<!-- BEGIN_INCLUDE(linkedin:joinGroup) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.joinGroup(accessToken, accessTokenSecret, groupId)
<!-- END_INCLUDE(linkedin:joinGroup) -->

<!-- BEGIN_INCLUDE(linkedin:leaveGroup) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.leaveGroup(accessToken, accessTokenSecret, groupId)
<!-- END_INCLUDE(linkedin:leaveGroup) -->

<!-- BEGIN_INCLUDE(linkedin:getPostsByGroup) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
List<PostField> postFields = ...
Integer start = ...
Integer count = ...
PostSortOrder order = ...
PostCategoryCode category = ...
Date modifiedSince = ..
LinkedInConnector linkedin = new LinkedInConnector();
Posts response = linkedin.getPostsByGroup(accessToken, accessTokenSecret, groupId, postFields, start, count, order, category, modifiedSince);
<!-- END_INCLUDE(linkedin:getPostsByGroup) -->

<!-- BEGIN_INCLUDE(linkedin:getPost) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
List<PostField> postFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Post response = linkedin.getPost(accessToken, accessTokenSecret, postId, postFields);
<!-- END_INCLUDE(linkedin:getPost) -->

<!-- BEGIN_INCLUDE(linkedin:getPostComments) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
List<CommentField> commentFields = ...
Integer start = ...
Integer count = ...
LinkedInConnector linkedin = new LinkedInConnector();
Post response = linkedin.getPostComments(accessToken, accessTokenSecret, postId, commentFields, start, count);
<!-- END_INCLUDE(linkedin:getPostComments) -->

<!-- BEGIN_INCLUDE(linkedin:createPost) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
String title = ...
String summary = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.createPost(accessToken, accessTokenSecret, groupId, title, summary);
<!-- END_INCLUDE(linkedin:createPost) -->

<!-- BEGIN_INCLUDE(linkedin:likeGroupPost) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.likeGroupPost(accessToken, accessTokenSecret, postId);
<!-- END_INCLUDE(linkedin:likeGroupPost) -->

<!-- BEGIN_INCLUDE(linkedin:unlikeGroupPost) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.unlikeGroupPost(accessToken, accessTokenSecret, postId);
<!-- END_INCLUDE(linkedin:unlikeGroupPost) -->

<!-- BEGIN_INCLUDE(linkedin:followPost) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.followPost(accessToken, accessTokenSecret, postId);
<!-- END_INCLUDE(linkedin:followPost) -->

<!-- BEGIN_INCLUDE(linkedin:unfollowPost) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.unfollowPost(accessToken, accessTokenSecret, postId);
<!-- END_INCLUDE(linkedin:unfollowPost) -->

<!-- BEGIN_INCLUDE(linkedin:flagPost) -->
<!--Incorrect implementation in BaseLinkedInApiClient
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
PostCategoryCode code = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.flagPost(accessToken, accessTokenSecret, postId, code);
-->
<!-- END_INCLUDE(linkedin:flagPost) -->

<!-- BEGIN_INCLUDE(linkedin:deletePost) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.deletePost(accessToken, accessTokenSecret, postId);
<!-- END_INCLUDE(linkedin:deletePost) -->

<!-- BEGIN_INCLUDE(linkedin:getPostComment) -->
<!--Incorrect implementation in BaseLinkedInApiClient
String accessToken = ...
String accessTokenSecret = ..
String commentId = ...
List<CommentField> 	commentFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Comment response = linkedin.getPostComment(accessToken, accessTokenSecret, commentId, commentFields);
-->
<!-- END_INCLUDE(linkedin:getPostComment) -->

<!-- BEGIN_INCLUDE(linkedin:addPostComment) -->
String accessToken = ...
String accessTokenSecret = ..
String postId = ...
String comment = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.addPostComment(accessToken, accessTokenSecret, postId, comment);
<!-- END_INCLUDE(linkedin:addPostComment) -->

<!-- BEGIN_INCLUDE(linkedin:deletePostComment) -->
String accessToken = ...
String accessTokenSecret = ..
String commentId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.deletePostComment(accessToken, accessTokenSecret, commentId);
<!-- END_INCLUDE(linkedin:deletePostComment) -->

<!-- BEGIN_INCLUDE(linkedin:getSuggestedGroups) -->
String accessToken = ...
String accessTokenSecret = ..
List<GroupField> groupFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Groups response = linkedin.getSuggestedGroups(accessToken, accessTokenSecret, groupFields);
<!-- END_INCLUDE(linkedin:getSuggestedGroups) -->

<!-- BEGIN_INCLUDE(linkedin:deleteGroupSuggestion) -->
String accessToken = ...
String accessTokenSecret = ..
String groupId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.deleteGroupSuggestion(accessToken, accessTokenSecret, groupId);
<!-- END_INCLUDE(linkedin:deleteGroupSuggestion) -->

<!-- BEGIN_INCLUDE(linkedin:getCompanyById) -->
String accessToken = ...
String accessTokenSecret = ..
String companyId = ...
List<CompanyField> companyFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Company response = linkedin.getCompanyById(accessToken, accessTokenSecret, companyId, companyFields);
<!-- END_INCLUDE(linkedin:getCompanyById) -->

<!-- BEGIN_INCLUDE(linkedin:getCompanyByUniversalName) -->
String accessToken = ...
String accessTokenSecret = ..
String universalName = ...
List<CompanyField> companyFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Company response = linkedin.getCompanyByUniversalName(accessToken, accessTokenSecret, universalName, companyFields);
<!-- END_INCLUDE(linkedin:getCompanyByUniversalName) -->

<!-- BEGIN_INCLUDE(linkedin:getCompaniesByEmailDomain) -->
String accessToken = ...
String accessTokenSecret = ..
String emailDomain = ...
List<CompanyField> companyFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Companies response = linkedin.getCompaniesByEmailDomain(accessToken, accessTokenSecret, emailDomain, companyFields);
<!-- END_INCLUDE(linkedin:getCompaniesByEmailDomain) -->

<!-- BEGIN_INCLUDE(linkedin:getFollowedCompanies) -->
String accessToken = ...
String accessTokenSecret = ..
List<CompanyField> companyFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Companies response = linkedin.getFollowedCompanies(accessToken, accessTokenSecret, companyFields);
<!-- END_INCLUDE(linkedin:getFollowedCompanies) -->

<!-- BEGIN_INCLUDE(linkedin:followCompany) -->
String accessToken = ...
String accessTokenSecret = ..
String companyId = ..
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.followCompany(accessToken, accessTokenSecret, companyId);
<!-- END_INCLUDE(linkedin:followCompany) -->

<!-- BEGIN_INCLUDE(linkedin:unfollowCompany) -->
String accessToken = ...
String accessTokenSecret = ..
String companyId = ..
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.unfollowCompany(accessToken, accessTokenSecret, companyId);
<!-- END_INCLUDE(linkedin:unfollowCompany) -->

<!-- BEGIN_INCLUDE(linkedin:getSuggestedCompanies) -->
String accessToken = ...
String accessTokenSecret = ..
List<CompanyField> companyFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Companies response = linkedin.getSuggestedCompanies(accessToken, accessTokenSecret, companyFields);
<!-- END_INCLUDE(linkedin:getSuggestedCompanies) -->

<!-- BEGIN_INCLUDE(linkedin:getCompanyProducts) -->
String accessToken = ...
String accessTokenSecret = ..
String companyId = ...
List<ProductField> productFields = ...
Integer start = ...
Integer count = ...
LinkedInConnector linkedin = new LinkedInConnector();
Products response = linkedin.getCompanyProducts(accessToken, accessTokenSecret, companyId, productFields, start, count);
<!-- END_INCLUDE(linkedin:getCompanyProducts) -->

<!-- BEGIN_INCLUDE(linkedin:searchCompanies) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<CompanyField> companyFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchCompanies(accessToken, accessTokenSecret, searchParameters, companyFields, start, count, sortOrder);
<!-- END_INCLUDE(linkedin:searchCompanies) -->

<!-- BEGIN_INCLUDE(linkedin:searchCompaniesWithFacets) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<CompanyField> companyFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder =
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchCompaniesWithFacets(accessToken, accessTokenSecret, searchParameters, companyFields, start, count, sortOrder, facets));
<!-- END_INCLUDE(linkedin:searchCompaniesWithFacets) -->

<!-- BEGIN_INCLUDE(linkedin:searchCompaniesWithFacetFields) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<CompanyField> companyFields = ...
List<FacetField> facetFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder =
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchCompaniesWithFacetFields(accessToken, accessTokenSecret, searchParameters, companyFields, facetFields, start, count, sortOrder, facets);
<!-- END_INCLUDE(linkedin:searchCompaniesWithFacetFields) -->

<!-- BEGIN_INCLUDE(linkedin:getJobById) -->
String accessToken = ...
String accessTokenSecret = ..
String jobId = ...
List<JobField> jobFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Job response = linkedin.getJobById(accessToken, accessTokenSecret, jobId, jobFields);
<!-- END_INCLUDE(linkedin:getJobById) -->

<!-- BEGIN_INCLUDE(linkedin:getJobBookmarks) -->
String accessToken = ...
String accessTokenSecret = ..
List<JobField> jobFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
JobBookmarks response = linkedin.getJobBookmarks(accessToken, accessTokenSecret, jobFields);
<!-- END_INCLUDE(linkedin:getJobBookmarks) -->

<!-- BEGIN_INCLUDE(linkedin:bookmarkJob) -->
<!--Incorrect implementation in BaseLinkedInApiClient
String accessToken = ...
String accessTokenSecret = ..
String jobId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.bookmarkJob(accessToken, accessTokenSecret, jobId);
-->
<!-- END_INCLUDE(linkedin:bookmarkJobb) -->

<!-- BEGIN_INCLUDE(linkedin:unbookmarkJob) -->
String accessToken = ...
String accessTokenSecret = ..
String jobId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.unbookmarkJob(accessToken, accessTokenSecret, jobId);
<!-- END_INCLUDE(linkedin:unbookmarkJob) -->

<!-- BEGIN_INCLUDE(linkedin:getJobSuggestions) -->
String accessToken = ...
String accessTokenSecret = ..
List<JobField> jobFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
JobBookmarks response = linkedin.getJobSuggestions(accessToken, accessTokenSecret, jobFields);
<!-- END_INCLUDE(linkedin:getJobSuggestions) -->

<!-- BEGIN_INCLUDE(linkedin:postJob) -->
String accessToken = ...
String accessTokenSecret = ..
LinkedInConnector linkedin = new LinkedInConnector();
Job job = ...
linkedin.postJob(accessToken, accessTokenSecret, job)
<!-- END_INCLUDE(linkedin:postJob) -->

<!-- BEGIN_INCLUDE(linkedin:updateJob) -->
String accessToken = ...
String accessTokenSecret = ..
String partnerJobId = ...
Job job = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.updateJob(accessToken, accessTokenSecret, partnerJobId, job);
<!-- END_INCLUDE(linkedin:updateJob) -->

<!-- BEGIN_INCLUDE(linkedin:renewJob) -->
String accessToken = ...
String accessTokenSecret = ..
String partnerJobId = ...
String contractId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.renewJob(accessToken, accessTokenSecret, partnerJobId, contractId);
<!-- END_INCLUDE(linkedin:renewJob) -->

<!-- BEGIN_INCLUDE(linkedin:closeJob) -->
String accessToken = ...
String accessTokenSecret = ..
String partnerJobId = ...
LinkedInConnector linkedin = new LinkedInConnector();
linkedin.closeJob(accessToken, accessTokenSecret, partnerJobId);
<!-- END_INCLUDE(linkedin:closeJob) -->

<!-- BEGIN_INCLUDE(linkedin:searchJobs) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<JobField> jobFields = ...
Integer start = ...
Integer count = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchJobs(accessToken, accessTokenSecret, searchParameters, jobFields, start, count);
<!-- END_INCLUDE(linkedin:searchJobs) -->

<!-- BEGIN_INCLUDE(linkedin:searchJobsWithFacets) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<JobField> jobFields = ...
Integer start = ...
Integer count = ...
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchJobsWithFacets(accessToken, accessTokenSecret, searchParameters, jobFields, start, count, facets));
<!-- END_INCLUDE(linkedin:searchJobsWithFacets) -->

<!-- BEGIN_INCLUDE(linkedin:searchJobsWithFacetFields) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<JobField> jobFields = ...
List<FacetField> facetFields = ...
Integer start = ...
Integer count = ...
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchJobsWithFacetFields(accessToken, accessTokenSecret, searchParameters, jobFields, facetFields, start, count, facets);
<!-- END_INCLUDE(linkedin:searchJobsWithFacetFields) -->