/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.linkedin;

import static org.fest.assertions.Assertions.assertThat;
import static org.fest.assertions.MapAssert.entry;
import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mule.api.MuleContext;
import org.mule.construct.Flow;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.transport.http.HttpConnector;

import com.google.code.linkedinapi.client.LinkedInApiClient;
import com.google.code.linkedinapi.client.Parameter;
import com.google.code.linkedinapi.client.enumeration.CommentField;
import com.google.code.linkedinapi.client.enumeration.CompanyField;
import com.google.code.linkedinapi.client.enumeration.ConnectionModificationType;
import com.google.code.linkedinapi.client.enumeration.FacetField;
import com.google.code.linkedinapi.client.enumeration.GroupField;
import com.google.code.linkedinapi.client.enumeration.GroupMembershipField;
import com.google.code.linkedinapi.client.enumeration.JobField;
import com.google.code.linkedinapi.client.enumeration.NetworkUpdateType;
import com.google.code.linkedinapi.client.enumeration.PostField;
import com.google.code.linkedinapi.client.enumeration.PostSortOrder;
import com.google.code.linkedinapi.client.enumeration.ProductField;
import com.google.code.linkedinapi.client.enumeration.ProfileField;
import com.google.code.linkedinapi.client.enumeration.ProfileType;
import com.google.code.linkedinapi.client.enumeration.SearchParameter;
import com.google.code.linkedinapi.client.enumeration.SearchSortOrder;
import com.google.code.linkedinapi.schema.EmailDigestFrequencyCode;
import com.google.code.linkedinapi.schema.FacetType;
import com.google.code.linkedinapi.schema.Person;
import com.google.code.linkedinapi.schema.PostCategoryCode;
import com.google.code.linkedinapi.schema.VisibilityType;

public class LinkedInConnectorTest extends FunctionalTestCase
{
    private static final String ID = "some-id";
    private static final String NETWORK_UPDATE_ID = "some-network-update-id";
    private static final int START = 10;
    private static final int COUNT = 20;
    private static final String SUBJECT = "some-subject";
    private static final String MESSAGE = "some-message";
    private static final boolean SHOW_HIDDEN_MEMBERS = true;
    private static final Date START_DATE = new Date(2011 - 1900, 8 - 1, 10);
    private static final Date END_DATE = new Date(2011 - 1900, 8 - 1, 10);
    private static final Date MODIFICATION_DATE = new Date(2011 - 1900, 8 - 1, 20);
    private static final String HTTP_PORT = "9099";
	private static final String TITLE = "some-title";
	private static final String SUMMARY = "some-summary";
	private static final String COMMENT = "some-comment";
	private static final String UNIVERSAL_NAME = "some-universal-name";
	private static final String EMAIL_DOMAIN = "some-email-domain";
	private static final PostSortOrder POST_SORT_ORDER= PostSortOrder.RECENCY;
	private static final PostCategoryCode POST_CATEGORY_CODE = PostCategoryCode.DISCUSSION;
	private static final String EVENT_TYPE = "some-event-type";
	private static final String COMPANY_UPDATE_KEY = "some-company-udpate-key";
	private static final String GEOGRAPHIES = "some-geo-code";
	private static final String COMPANY_SIZES = "some-company-size-range";
	private static final String JOB_FUNCTIONS = "some-job-functions";
	private static final String INDUSTRIES = "some-industry-code";
	private static final String SENIORITIES = "some-seniority-code";
	private static final String CONTACT_EMAIL = "some-contact-email";
	private static final EmailDigestFrequencyCode EMAIL_DIGEST_FREQUENCY_CODE = EmailDigestFrequencyCode.DAILY;
    
    private Set<ProfileField> profileFields;
    private Set<NetworkUpdateType> networkUpdateTypes;
    private Set<GroupField> groupFields;
    private Set<GroupMembershipField> groupMembershipFields;
    private Set<CommentField> commentFields;
    private Set<PostField> postFields;
    private Set<CompanyField> companyFields;
    private Set<ProductField> productFields;
    private Set<JobField> jobFields;
    //private Set<JobBookmark> jobBookmarkFields;
    
    private Set<FacetField> facetFields;    
    private List<Parameter<FacetType, String>> facets;
    private Map<SearchParameter, String> searchParameters;
    
    @Mock
    private LinkedInApiClient mockClient;
    
    @Mock
    private Person person;
    
    @Captor
    private ArgumentCaptor<List<Parameter<FacetType, String>>> facetsCaptor;
    @Captor
    private ArgumentCaptor<Map<SearchParameter, String>> searchParametersCaptor;
    
    @Captor
    private ArgumentCaptor<Set<ProfileField>> profileFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<NetworkUpdateType>> networkUpdateTypesCaptor;    
    @Captor
    private ArgumentCaptor<Set<FacetField>> facetFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<GroupField>> groupFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<GroupMembershipField>> groupMembershipFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<CommentField>> commentFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<PostField>> postFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<CompanyField>> companyFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<ProductField>> productFieldsCaptor;
    @Captor
    private ArgumentCaptor<Set<JobField>> jobFieldsCaptor;
    
    @Override
    protected String getConfigResources() {
        return "linkedin-test-config.xml";
    }

    @Override
    protected MuleContext createMuleContext() throws Exception {
        System.setProperty("http.port", HTTP_PORT);

        MuleContext muleContext = super.createMuleContext();
        muleContext.getRegistry().registerObject("connector.http.mule.default", new HttpConnector(muleContext));
        return muleContext;
    }

    @Override
    protected void doSetUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        LinkedInClientFactory.setDefaultClient(mockClient);

        /*LinkedInConnectorOAuth1Adapter moduleObject = muleContext.getRegistry().lookupObject(LinkedInConnectorOAuth1Adapter.class);
        moduleObject.setAccessToken("");
        moduleObject.setAccessTokenSecret("");
        moduleObject.setOauthVerifier("");*/

        profileFields = new LinkedHashSet<ProfileField>(2);
        profileFields.add(ProfileField.LAST_NAME);
        profileFields.add(ProfileField.HONORS);
        
        groupFields = new LinkedHashSet<GroupField>(2);
        groupFields.add(GroupField.DESCRIPTION);
        groupFields.add(GroupField.POSTS);
        
        groupMembershipFields = new LinkedHashSet<GroupMembershipField>(2);
        groupMembershipFields.add(GroupMembershipField.GROUP_NAME);
        groupMembershipFields.add(GroupMembershipField.CONTACT_EMAIL);
        
        commentFields = new LinkedHashSet<CommentField>(2);
        commentFields.add(CommentField.TEXT);
        commentFields.add(CommentField.CREATOR);
        
        postFields = new LinkedHashSet<PostField>(2);
        postFields.add(PostField.TYPE);
        postFields.add(PostField.CATEGORY);
        
        companyFields = new LinkedHashSet<CompanyField>(2);
        companyFields.add(CompanyField.NAME);
        companyFields.add(CompanyField.UNIVERSAL_NAME);
        
        productFields = new LinkedHashSet<ProductField>(2);
        productFields.add(ProductField.NAME);
        productFields.add(ProductField.TYPE);
        
        jobFields = new LinkedHashSet<JobField>(2);
        jobFields.add(JobField.CUSTOMER_JOB_CODE);
        jobFields.add(JobField.POSTING_TIMESTAMP);
        
        networkUpdateTypes = new LinkedHashSet<NetworkUpdateType>(2);
        networkUpdateTypes.add(NetworkUpdateType.PROFILE_UPDATE);
        networkUpdateTypes.add(NetworkUpdateType.RECOMMENDATION_UPDATE);

        searchParameters = new LinkedHashMap<SearchParameter, String>(2);
        searchParameters.put(SearchParameter.CURRENT_COMPANY, "MuleSoft");
        searchParameters.put(SearchParameter.TITLE, "Engineer");

        facets = new ArrayList<Parameter<FacetType, String>>(2);
        facets.add(new Parameter<FacetType, String>(FacetType.INDUSTRY, "Software"));
        facets.add(new Parameter<FacetType, String>(FacetType.PAST_COMPANY, "MuleSource"));

        facetFields = new LinkedHashSet<FacetField>(2);
        facetFields.add(FacetField.BUCKET_NAME);
        facetFields.add(FacetField.BUCKET_CODE);
    }

    @Test
    public void testGetProfileForCurrentUserC1() throws Exception {
        runFlow("GetProfileForCurrentUserC1");
        verify(mockClient).getProfileForCurrentUser();
    }
    
    @Test
    public void testGetProfileForCurrentUserC2() throws Exception {
        runFlow("GetProfileForCurrentUserC2");
        verify(mockClient).getProfileForCurrentUser(profileFieldsCaptor.capture());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }

    @Test
    public void testGetProfileByIdC1() throws Exception {
        runFlow("GetProfileByIdC1");
        verify(mockClient).getProfileById(eq(ID));
    }
    
    @Test
    public void testGetProfileByIdC2() throws Exception {
        runFlow("GetProfileByIdC2");
        verify(mockClient).getProfileById(eq(ID), profileFieldsCaptor.capture());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetProfileByUrlC1() throws Exception {
        runFlow("GetProfileByUrlC1");
        verify(mockClient).getProfileByUrl(eq("some-url"), eq(ProfileType.STANDARD));
    }

    @Test
    public void testGetNetworkUpdatesC1() throws Exception {
        runFlow("GetNetworkUpdatesC1");
        verify(mockClient).getNetworkUpdates();
    }
    
    @Test
    public void testGetNetworkUpdatesC2() throws Exception {
        runFlow("GetNetworkUpdatesC2");
        verify(mockClient).getNetworkUpdates(networkUpdateTypesCaptor.capture());
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    @Test
    public void testGetNetworkUpdatesC3() throws Exception {
        runFlow("GetNetworkUpdatesC3");
        verify(mockClient).getNetworkUpdates(eq(START_DATE), eq(END_DATE));
    }
    @Test
    public void testGetNetworkUpdatesC4() throws Exception {
        runFlow("GetNetworkUpdatesC4");
        verify(mockClient).getNetworkUpdates(eq(START), eq(COUNT));
    }
    @Test
    public void testGetNetworkUpdatesC5() throws Exception {
        runFlow("GetNetworkUpdatesC5");
        verify(mockClient).getNetworkUpdates(networkUpdateTypesCaptor.capture(), eq(START_DATE), eq(END_DATE));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    @Test
    public void testGetNetworkUpdatesC6() throws Exception {
        runFlow("GetNetworkUpdatesC6");
        verify(mockClient).getNetworkUpdates(networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    @Test
    public void testGetNetworkUpdatesC7() throws Exception {
        runFlow("GetNetworkUpdatesC7");
        verify(mockClient).getNetworkUpdates(networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT), eq(START_DATE), eq(END_DATE));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    @Test
    public void testGetNetworkUpdatesC8() throws Exception {
        runFlow("GetNetworkUpdatesC8");
        verify(mockClient).getNetworkUpdates(networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT), eq(START_DATE), eq(END_DATE), eq(SHOW_HIDDEN_MEMBERS));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }

    @Test
    public void testGetUserUpdatesC1() throws Exception {
        runFlow("GetUserUpdatesC1");
        verify(mockClient).getUserUpdates();
    }
    
    @Test
    public void testGetUserUpdatesC2() throws Exception {
        runFlow("GetUserUpdatesC2");
        verify(mockClient).getUserUpdates(networkUpdateTypesCaptor.capture());
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesC3() throws Exception {
        runFlow("GetUserUpdatesC3");
        verify(mockClient).getUserUpdates(eq(START), eq(COUNT));
    }
    
    @Test
    public void testGetUserUpdatesC4() throws Exception {
        runFlow("GetUserUpdatesC4");
        verify(mockClient).getUserUpdates(eq(START_DATE), eq(END_DATE));
    }
    
    @Test
    public void testGetUserUpdatesC5() throws Exception {
        runFlow("GetUserUpdatesC5");
        verify(mockClient).getUserUpdates(networkUpdateTypesCaptor.capture(), eq(START_DATE), eq(END_DATE));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesC6() throws Exception {
        runFlow("GetUserUpdatesC6");
        verify(mockClient).getUserUpdates(networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesC7() throws Exception {
        runFlow("GetUserUpdatesC7");
        verify(mockClient).getUserUpdates(networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT), eq(START_DATE), eq(END_DATE));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesByIdC1() throws Exception {
        runFlow("GetUserUpdatesByIdC1");
        verify(mockClient).getUserUpdates(eq(ID));
    }
    
    @Test
    public void testGetUserUpdatesByIdC2() throws Exception {
        runFlow("GetUserUpdatesByIdC2");
        verify(mockClient).getUserUpdates(eq(ID), networkUpdateTypesCaptor.capture());
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesByIdC3() throws Exception {
        runFlow("GetUserUpdatesByIdC3");
        verify(mockClient).getUserUpdates(eq(ID), eq(START_DATE), eq(END_DATE));
    }
    
    @Test
    public void testGetUserUpdatesByIdC4() throws Exception {
        runFlow("GetUserUpdatesByIdC4");
        verify(mockClient).getUserUpdates(eq(ID), eq(START), eq(COUNT));
    }
    
    @Test
    public void testGetUserUpdatesByIdC5() throws Exception {
        runFlow("GetUserUpdatesByIdC5");
        verify(mockClient).getUserUpdates(eq(ID), networkUpdateTypesCaptor.capture(), eq(START_DATE), eq(END_DATE));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesByIdC6() throws Exception {
        runFlow("GetUserUpdatesByIdC6");
        verify(mockClient).getUserUpdates(eq(ID), networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }
    
    @Test
    public void testGetUserUpdatesByIdC7() throws Exception {
        runFlow("GetUserUpdatesByIdC7");
        verify(mockClient).getUserUpdates(eq(ID), networkUpdateTypesCaptor.capture(), eq(START), eq(COUNT), eq(START_DATE), eq(END_DATE));
        assertThat(networkUpdateTypesCaptor.getValue()).containsOnly(networkUpdateTypes.toArray());
    }

    @Test
    public void testGetNetworkUpdateCommentsC1() throws Exception {
        runFlow("GetNetworkUpdateCommentsC1");
        verify(mockClient).getNetworkUpdateComments(eq(NETWORK_UPDATE_ID));
    }

    @Test
    public void testGetNetworkUpdateLikesC1() throws Exception {
        runFlow("GetNetworkUpdateLikesC1");
        verify(mockClient).getNetworkUpdateLikes(eq(NETWORK_UPDATE_ID));
    }

    @Test
    public void testGetConnectionsForCurrentUserC1() throws Exception {
        runFlow("GetConnectionsForCurrentUserC1");
        verify(mockClient).getConnectionsForCurrentUser();
    }    
    @Test
    public void testGetConnectionsForCurrentUserC2() throws Exception {
        runFlow("GetConnectionsForCurrentUserC2");
        verify(mockClient).getConnectionsForCurrentUser(profileFieldsCaptor.capture());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    @Test
    public void testGetConnectionsForCurrentUserC3() throws Exception {
        runFlow("GetConnectionsForCurrentUserC3");
        verify(mockClient).getConnectionsForCurrentUser(eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
    }
    @Test
    public void testGetConnectionsForCurrentUserC4() throws Exception {
        runFlow("GetConnectionsForCurrentUserC4");
        verify(mockClient).getConnectionsForCurrentUser(eq(START), eq(COUNT));
    }
    @Test
    public void testGetConnectionsForCurrentUserC5() throws Exception {
        runFlow("GetConnectionsForCurrentUserC5");
        verify(mockClient).getConnectionsForCurrentUser(eq(START), eq(COUNT), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
    }
    @Test
    public void testGetConnectionsForCurrentUserC6() throws Exception {
        runFlow("GetConnectionsForCurrentUserC6");
        verify(mockClient).getConnectionsForCurrentUser(profileFieldsCaptor.capture(), eq(START), eq(COUNT));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    @Test
    public void testGetConnectionsForCurrentUserC7() throws Exception {
        runFlow("GetConnectionsForCurrentUserC7");
        verify(mockClient).getConnectionsForCurrentUser(profileFieldsCaptor.capture(), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    @Test
    public void testGetConnectionsForCurrentUserC8() throws Exception {
        runFlow("GetConnectionsForCurrentUserC8");
        verify(mockClient).getConnectionsForCurrentUser(profileFieldsCaptor.capture(), eq(START), eq(COUNT), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }

    @Test
    public void testGetConnectionsByIdC1() throws Exception {
        runFlow("GetConnectionsByIdC1");
        verify(mockClient).getConnectionsById(eq(ID));
    }
    
    @Test
    public void testGetConnectionsByIdC2() throws Exception {
        runFlow("GetConnectionsByIdC2");
        verify(mockClient).getConnectionsById(eq(ID), profileFieldsCaptor.capture());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetConnectionsByIdC3() throws Exception {
        runFlow("GetConnectionsByIdC3");
        verify(mockClient).getConnectionsById(eq(ID), eq(START), eq(COUNT));
    }
    
    @Test
    public void testGetConnectionsByIdC4() throws Exception {
        runFlow("GetConnectionsByIdC4");
        verify(mockClient).getConnectionsById(eq(ID), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
    }
    
    @Test
    public void testGetConnectionsByIdC5() throws Exception {
        runFlow("GetConnectionsByIdC5");
        verify(mockClient).getConnectionsById(eq(ID), eq(START), eq(COUNT), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
    }
    
    @Test
    public void testGetConnectionsByIdC6() throws Exception {
        runFlow("GetConnectionsByIdC6");
        verify(mockClient).getConnectionsById(eq(ID), profileFieldsCaptor.capture(), eq(START), eq(COUNT));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetConnectionsByIdC7() throws Exception {
        runFlow("GetConnectionsByIdC7");
        verify(mockClient).getConnectionsById(eq(ID), profileFieldsCaptor.capture(), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetConnectionsByIdC8() throws Exception {
        runFlow("GetConnectionsByIdC8");
        verify(mockClient).getConnectionsById(eq(ID), profileFieldsCaptor.capture(), eq(START), eq(COUNT), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }    

    @Test
    public void testGetConnectionsByUrlC1() throws Exception {
        runFlow("GetConnectionsByUrlC1");
        verify(mockClient).getConnectionsByUrl(eq("some-url"));
    }
    
    @Test
    public void testGetConnectionsByUrlC2() throws Exception {
        runFlow("GetConnectionsByUrlC2");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), profileFieldsCaptor.capture());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetConnectionsByUrlC3() throws Exception {
        runFlow("GetConnectionsByUrlC3");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), eq(START), eq(COUNT));
    }
    
    @Test
    public void testGetConnectionsByUrlC4() throws Exception {
        runFlow("GetConnectionsByUrlC4");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
    }
    
    @Test
    public void testGetConnectionsByUrlC5() throws Exception {
        runFlow("GetConnectionsByUrlC5");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), eq(START), eq(COUNT), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
    }
    
    @Test
    public void testGetConnectionsByUrlC6() throws Exception {
        runFlow("GetConnectionsByUrlC6");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), profileFieldsCaptor.capture(), eq(START), eq(COUNT));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetConnectionsByUrlC7() throws Exception {
        runFlow("GetConnectionsByUrlC7");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), profileFieldsCaptor.capture(), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testGetConnectionsByUrlC8() throws Exception {
        runFlow("GetConnectionsByUrlC8");
        verify(mockClient).getConnectionsByUrl(eq("some-url"), profileFieldsCaptor.capture(), eq(START), eq(COUNT), eq(MODIFICATION_DATE), eq(ConnectionModificationType.NEW));
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }    

    @Test
    public void testSearchPeopleC1() throws Exception {
        runFlow("SearchPeopleC1");
        verify(mockClient).searchPeople();
    }
    
    @Test
    public void testSearchPeopleC2() throws Exception {
        runFlow("SearchPeopleC2");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
    }
    
    @Test
    public void testSearchPeopleC3() throws Exception {
        runFlow("SearchPeopleC3");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
    }
    
    @Test
    public void testSearchPeopleC4() throws Exception {
        runFlow("SearchPeopleC4");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testSearchPeopleC5() throws Exception {
        runFlow("SearchPeopleC5");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }

    @Test
    public void testSearchPeopleWithFacetsC1() throws Exception {
        runFlow("SearchPeopleWithFacetsC1");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchPeopleWithFacetsC2() throws Exception {
        runFlow("SearchPeopleWithFacetsC2");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchPeopleWithFacetsC3() throws Exception {
        runFlow("SearchPeopleWithFacetsC3");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchPeopleWithFacetsC4() throws Exception {
        runFlow("SearchPeopleWithFacetsC4");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }

    @Test
    public void testSearchPeopleWithFacetFieldsC1() throws Exception {
        runFlow("SearchPeopleWithFacetFieldsC1");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testSearchPeopleWithFacetFieldsC2() throws Exception {
        runFlow("SearchPeopleWithFacetFieldsC2");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchPeopleWithFacetFieldsC3() throws Exception {
        runFlow("SearchPeopleWithFacetFieldsC3");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
    }
    
    @Test
    public void testSearchPeopleWithFacetFieldsC4() throws Exception {
        runFlow("SearchPeopleWithFacetFieldsC4");
        verify(mockClient).searchPeople(searchParametersCaptor.capture(), profileFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(profileFieldsCaptor.getValue()).containsOnly(profileFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }

    @Test
    public void testPostNetworkUpdateC1() throws Exception {
        runFlow("PostNetworkUpdateC1");
        verify(mockClient).postNetworkUpdate(eq("some-update-text"));
    }

    @Test
    public void testPostCommentC1() throws Exception {
        runFlow("PostCommentC1");
        verify(mockClient).postComment(eq(NETWORK_UPDATE_ID), eq("some-comment-text"));
    }

    @Test
    public void testLikePostC1() throws Exception {
        runFlow("LikePostC1");
        verify(mockClient).likePost(eq(NETWORK_UPDATE_ID));
    }

    @Test
    public void testUnlikePostC1() throws Exception {
        runFlow("UnlikePostC1");
        verify(mockClient).unlikePost(eq(NETWORK_UPDATE_ID));
    }

    @Test
    public void testSendMessageC1() throws Exception {
        runFlow("SendMessageC1");
        verify(mockClient).sendMessage(eq(Arrays.asList("recipientId1", "recipientId2")), eq(SUBJECT), eq(MESSAGE));
    }

    @Test
    public void testSendInviteByEmailC1() throws Exception {
        runFlow("SendInviteByEmailC1");
        verify(mockClient).sendInviteByEmail(eq("some-email"), eq("some-name"), eq("some-last-name"), eq(SUBJECT), eq(MESSAGE));
    }
    
    @Test
    public void testPostShareC1() throws Exception {
        runFlow("PostShareC1");
        verify(mockClient).postShare(eq("some-comment"), eq("some-title"), eq("some-description"), eq("some-url"), eq("some-image-url"), eq(VisibilityType.ALL_MEMBERS), eq(true));
    }

    @Test
    public void testReShareC1() throws Exception {
        runFlow("ReShareC1");
        verify(mockClient).reShare(eq("some-share-id"), eq("some-comment"), eq(VisibilityType.ALL_MEMBERS));
    }
    
    @Test
    public void testGetGroupByIdC1() throws Exception{
    	runFlow("GetGroupByIdC1");
        verify(mockClient).getGroupById(eq(ID));
    }
    
    @Test
    public void testGetGroupByIdC2() throws Exception{
    	runFlow("GetGroupByIdC2");
        verify(mockClient).getGroupById(eq(ID), groupFieldsCaptor.capture());
        assertThat(groupFieldsCaptor.getValue()).containsOnly(groupFields.toArray());
    }
    
    @Test
    public void testGetGroupMembershipsC1() throws Exception{
    	runFlow("GetGroupMembershipsC1");
        verify(mockClient).getGroupMemberships();
    }
    
    @Test
    public void testGetGroupMembershipsC2() throws Exception{
    	runFlow("GetGroupMembershipsC2");
        verify(mockClient).getGroupMemberships(groupMembershipFieldsCaptor.capture());
        assertThat(groupMembershipFieldsCaptor.getValue()).containsOnly(groupMembershipFields.toArray());
    }
    
    @Test
    public void testGetGroupMembershipsC3() throws Exception{
    	runFlow("GetGroupMembershipsC3");
        verify(mockClient).getGroupMemberships(eq(ID));
    }
    
    @Test
    public void testGetGroupMembershipsC4() throws Exception{
    	runFlow("GetGroupMembershipsC4");
        verify(mockClient).getGroupMemberships(eq(ID), groupMembershipFieldsCaptor.capture());
        assertThat(groupMembershipFieldsCaptor.getValue()).containsOnly(groupMembershipFields.toArray());
    }
    
    @Test
    public void testGetGroupMembershipsC5() throws Exception{
    	runFlow("GetGroupMembershipsC5");
        verify(mockClient).getGroupMemberships(groupMembershipFieldsCaptor.capture(), eq(START), eq(COUNT));
        assertThat(groupMembershipFieldsCaptor.getValue()).containsOnly(groupMembershipFields.toArray());
    }
    
    @Test
    public void testGetGroupMembershipsC6() throws Exception{
    	runFlow("GetGroupMembershipsC6");
        verify(mockClient).getGroupMemberships(eq(ID), groupMembershipFieldsCaptor.capture(), eq(START), eq(COUNT));
        assertThat(groupMembershipFieldsCaptor.getValue()).containsOnly(groupMembershipFields.toArray());
    }
    
    @Test
    public void testJoinGroupC1() throws Exception{
    	runFlow("JoinGroupC1");
    	verify(mockClient).joinGroup(eq(ID));
    }
    
    @Test
    public void testLeaveGroupC1() throws Exception{
    	runFlow("LeaveGroupC1");
    	verify(mockClient).leaveGroup(eq(ID));
    }
    
    @Test
    public void testGetPostsByGroupC1() throws Exception{
    	runFlow("GetPostsByGroupC1");
    	verify(mockClient).getPostsByGroup(eq(ID), eq(START), eq(COUNT), eq(POST_SORT_ORDER));
    }
    
    @Test
    public void testGetPostsByGroupC2() throws Exception{
    	runFlow("GetPostsByGroupC2");
    	verify(mockClient).getPostsByGroup(eq(ID), eq(START), eq(COUNT), eq(POST_SORT_ORDER), eq(MODIFICATION_DATE));
    }
    
    @Test
    public void testGetPostsByGroupC3() throws Exception{
    	runFlow("GetPostsByGroupC3");
    	verify(mockClient).getPostsByGroup(eq(ID), eq(START), eq(COUNT), eq(POST_SORT_ORDER), eq(POST_CATEGORY_CODE));    	
    }
    
    @Test
    public void testGetPostsByGroupC4() throws Exception{
    	runFlow("GetPostsByGroupC4");
    	verify(mockClient).getPostsByGroup(eq(ID), postFieldsCaptor.capture(), eq(START), eq(COUNT), eq(POST_SORT_ORDER));
    	assertThat(postFieldsCaptor.getValue()).containsOnly(postFields.toArray());
    }
    
    @Test
    public void testGetPostsByGroupC5() throws Exception{
    	runFlow("GetPostsByGroupC5");
    	verify(mockClient).getPostsByGroup(eq(ID), eq(START), eq(COUNT), eq(POST_SORT_ORDER), eq(POST_CATEGORY_CODE), eq(MODIFICATION_DATE));    	
    }    
    
    @Test
    public void testGetPostsByGroupC6() throws Exception{
    	runFlow("GetPostsByGroupC6");
    	verify(mockClient).getPostsByGroup(eq(ID), postFieldsCaptor.capture(), eq(START), eq(COUNT), eq(POST_SORT_ORDER), eq(MODIFICATION_DATE));
    }
    
    @Test
    public void testGetPostsByGroupC7() throws Exception{
    	runFlow("GetPostsByGroupC7");
    	verify(mockClient).getPostsByGroup(eq(ID), postFieldsCaptor.capture(), eq(START), eq(COUNT), eq(POST_SORT_ORDER), eq(POST_CATEGORY_CODE));
    }
    
    @Test
    public void testGetPostsByGroupC8() throws Exception{
    	runFlow("GetPostsByGroupC8");
    	verify(mockClient).getPostsByGroup(eq(ID), postFieldsCaptor.capture(), eq(START), eq(COUNT), eq(POST_SORT_ORDER), eq(POST_CATEGORY_CODE), 
    			eq(MODIFICATION_DATE));    
    }

    @Test
    public void testGetPostC1() throws Exception{
    	runFlow("GetPostC1");
    	verify(mockClient).getPost(eq(ID));
    }
    
    @Test
    public void testGetPostC2() throws Exception{
    	runFlow("GetPostC2");
    	verify(mockClient).getPost(eq(ID), postFieldsCaptor.capture());
    	assertThat(postFieldsCaptor.getValue()).containsOnly(postFields.toArray());
    }
    
    @Test
    public void testGetPostCommentsC1() throws Exception{
    	runFlow("GetPostCommentsC1");
    	verify(mockClient).getPostComments(eq(ID));
    }
    
    @Test
    public void testGetPostCommentsC2() throws Exception{
    	runFlow("GetPostCommentsC2");
    	verify(mockClient).getPostComments(eq(ID), commentFieldsCaptor.capture());
    	assertThat(commentFieldsCaptor.getValue()).containsOnly(commentFields.toArray());
    }
    
    @Test
    public void testGetPostCommentsC3() throws Exception{
    	runFlow("GetPostCommentsC3");
    	verify(mockClient).getPostComments(eq(ID), eq(START), eq(COUNT));
    }
    
    @Test
    public void testGetPostCommentsC4() throws Exception{
    	runFlow("GetPostCommentsC4");
    	verify(mockClient).getPostComments(eq(ID), commentFieldsCaptor.capture(), eq(START), eq(COUNT));
    	assertThat(commentFieldsCaptor.getValue()).containsOnly(commentFields.toArray());
    }
    
    @Test
    public void testCreatePostC1() throws Exception{
    	runFlow("CreatePostC1");
    	verify(mockClient).createPost(eq(ID), eq(TITLE), eq(SUMMARY));
    }
    
    @Test
    public void testLikeGroupPostC1() throws Exception{
    	runFlow("LikeGroupPostC1");
    	verify(mockClient).likeGroupPost(eq(ID));
    }
    
    @Test
    public void testUnlikeGroupPostC1() throws Exception{
    	runFlow("UnlikeGroupPostC1");
    	verify(mockClient).unlikeGroupPost(eq(ID));
    }
    
    @Test
    public void testFollowPostC1() throws Exception{
    	runFlow("FollowPostC1");
    	verify(mockClient).followPost(eq(ID));
    }
    
    @Test
    public void testUnfollowPostC1() throws Exception{
    	runFlow("UnfollowPostC1");
    	verify(mockClient).unfollowPost(eq(ID));
    }
    
    @Test
    public void testDeletePostC1() throws Exception{
    	runFlow("DeletePostC1");
    	verify(mockClient).deletePost(eq(ID));
    }
    
    @Test
    public void testAddPostCommentC1() throws Exception{
    	runFlow("AddPostCommentC1");
    	verify(mockClient).addPostComment(eq(ID), eq(COMMENT));
    }
    
    @Test
    public void testDeletePostCommentC1() throws Exception{
    	runFlow("DeletePostCommentC1");
    	verify(mockClient).deletePostComment(eq(ID));
    }
    
    @Test
    public void testGetSuggestedGroupsC1() throws Exception{
    	runFlow("GetSuggestedGroupsC1");
    	verify(mockClient).getSuggestedGroups();
    }
    
    @Test
    public void testGetSuggestedGroupsC2() throws Exception{
    	runFlow("GetSuggestedGroupsC2");
    	verify(mockClient).getSuggestedGroups(groupFieldsCaptor.capture());
    	assertThat(groupFieldsCaptor.getValue()).containsOnly(groupFields.toArray());
    }
    
    @Test
    public void testDeleteGroupSuggestionC1() throws Exception{
    	runFlow("DeleteGroupSuggestionC1");
    	verify(mockClient).deleteGroupSuggestion(eq(ID));
    }
    
    @Test
    public void testGetCompanyByIdC1() throws Exception{
    	runFlow("GetCompanyByIdC1");
    	verify(mockClient).getCompanyById(eq(ID));
    }
    
    @Test
    public void testGetCompanyByIdC2() throws Exception{
    	runFlow("GetCompanyByIdC2");
    	verify(mockClient).getCompanyById(eq(ID), companyFieldsCaptor.capture());
    	assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testGetCompanyByUniversalNameC1() throws Exception{
    	runFlow("GetCompanyByUniversalNameC1");
    	verify(mockClient).getCompanyByUniversalName(eq(UNIVERSAL_NAME));
    }
    
    @Test
    public void testGetCompanyByUniversalNameC2() throws Exception{
    	runFlow("GetCompanyByUniversalNameC2");
    	verify(mockClient).getCompanyByUniversalName(eq(UNIVERSAL_NAME), companyFieldsCaptor.capture());
    	assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testGetCompaniesByEmailDomainC1() throws Exception{
    	runFlow("GetCompaniesByEmailDomainC1");
    	verify(mockClient).getCompaniesByEmailDomain(eq(EMAIL_DOMAIN));
    }
    
    @Test
    public void testGetCompaniesByEmailDomainC2() throws Exception{
    	runFlow("GetCompaniesByEmailDomainC2");
    	verify(mockClient).getCompaniesByEmailDomain(eq(EMAIL_DOMAIN), companyFieldsCaptor.capture());
    	assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testGetFollowedCompaniesC1() throws Exception{
    	runFlow("GetFollowedCompaniesC1");
    	verify(mockClient).getFollowedCompanies();
    }
    
    @Test
    public void testGetFollowedCompaniesC2() throws Exception{
    	runFlow("GetFollowedCompaniesC2");
    	verify(mockClient).getFollowedCompanies(companyFieldsCaptor.capture());
    	assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testFollowCompanyC1() throws Exception{
    	runFlow("FollowCompanyC1");
    	verify(mockClient).followCompany(eq(ID));
    }
    
    @Test
    public void testUnfollowCompanyC1() throws Exception{
    	runFlow("UnfollowCompanyC1");
    	verify(mockClient).unfollowCompany(eq(ID));
    }
    
    @Test
    public void testGetSuggestedCompaniesC1() throws Exception{
    	runFlow("GetSuggestedCompaniesC1");
    	verify(mockClient).getSuggestedCompanies();
    }
    
    @Test
    public void testGetSuggestedCompaniesC2() throws Exception{
    	runFlow("GetSuggestedCompaniesC2");
    	verify(mockClient).getSuggestedCompanies(companyFieldsCaptor.capture());
    	assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testGetCompanyProductsC1() throws Exception{
    	runFlow("GetCompanyProductsC1");
    	verify(mockClient).getCompanyProducts(eq(ID));
    }
    
    @Test
    public void testGetCompanyProductsC2() throws Exception{
    	runFlow("GetCompanyProductsC2");
    	verify(mockClient).getCompanyProducts(eq(ID), productFieldsCaptor.capture());
    }
    
    @Test
    public void testGetCompanyProductsC3() throws Exception{
    	runFlow("GetCompanyProductsC3");
    	verify(mockClient).getCompanyProducts(eq(ID), eq(START), eq(COUNT));
    }
    
    @Test
    public void testGetCompanyProductsC4() throws Exception{
    	runFlow("GetCompanyProductsC4");
    	verify(mockClient).getCompanyProducts(eq(ID), productFieldsCaptor.capture(), eq(START), eq(COUNT));
    	assertThat(productFieldsCaptor.getValue()).containsOnly(productFields.toArray());
    }
    
    @Test
    public void testSearchCompaniesC1() throws Exception {
        runFlow("SearchCompaniesC1");
        verify(mockClient).searchCompanies();
    }
    
    @Test
    public void testSearchCompaniesC2() throws Exception {
        runFlow("SearchCompaniesC2");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
    }
    
    @Test
    public void testSearchCompaniesC3() throws Exception {
        runFlow("SearchCompaniesC3");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
    }
    
    @Test
    public void testSearchCompaniesC4() throws Exception {
        runFlow("SearchCompaniesC4");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testSearchCompaniesC5() throws Exception {
        runFlow("SearchCompaniesC5");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }

    @Test
    public void testSearchCompaniesWithFacetsC1() throws Exception {
        runFlow("SearchCompaniesWithFacetsC1");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchCompaniesWithFacetsC2() throws Exception {
        runFlow("SearchCompaniesWithFacetsC2");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchCompaniesWithFacetsC3() throws Exception {
        runFlow("SearchCompaniesWithFacetsC3");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchCompaniesWithFacetsC4() throws Exception {
        runFlow("SearchCompaniesWithFacetsC4");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }

    @Test
    public void testSearchCompaniesWithFacetFieldsC1() throws Exception {
        runFlow("SearchCompaniesWithFacetFieldsC1");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testSearchCompaniesWithFacetFieldsC2() throws Exception {
        runFlow("SearchCompaniesWithFacetFieldsC2");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchCompaniesWithFacetFieldsC3() throws Exception {
        runFlow("SearchCompaniesWithFacetFieldsC3");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS));
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
    }
    
    @Test
    public void testSearchCompaniesWithFacetFieldsC4() throws Exception {
        runFlow("SearchCompaniesWithFacetFieldsC4");
        verify(mockClient).searchCompanies(searchParametersCaptor.capture(), companyFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(START), eq(COUNT), eq(SearchSortOrder.RECOMMENDERS), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(companyFieldsCaptor.getValue()).containsOnly(companyFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testGetJobByIdC1() throws Exception{
    	runFlow("GetJobByIdC1");
    	verify(mockClient).getJobById(eq(ID));
    }
    
    @Test
    public void testGetJobByIdC2() throws Exception{
    	runFlow("GetJobByIdC2");
    	verify(mockClient).getJobById(eq(ID), jobFieldsCaptor.capture());
    	assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
    }
    
    @Test
    public void testGetJobBookmarksC1() throws Exception{
    	runFlow("GetJobBookmarksC1");
    	verify(mockClient).getJobBookmarks();
    	//TODO
    	//assertThat(jobFieldsCaptor.getValue()).containsOnly(jobBookmarkFields.toArray());
    }
    
    @Test
    public void testGetJobBookmarksC2() throws Exception{
    	runFlow("GetJobBookmarksC2");
    	verify(mockClient).getJobBookmarks(jobFieldsCaptor.capture());
    }
    
    @Test
    public void testGetJobSuggestionsC1() throws Exception{
    	runFlow("GetJobSuggestionsC1");
    	verify(mockClient).getJobSuggestions();
    }
    
    @Test
    public void testGetJobSuggestionsC2() throws Exception{
    	runFlow("GetJobSuggestionsC2");
    	verify(mockClient).getJobSuggestions(jobFieldsCaptor.capture());
    	assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
    }
    
    @Test
    public void testSearchJobsC1() throws Exception {
        runFlow("SearchJobsC1");
        verify(mockClient).searchJobs();
    }
    
    @Test
    public void testSearchJobsC2() throws Exception {
        runFlow("SearchJobsC2");
        verify(mockClient).searchJobs(searchParametersCaptor.capture());
        verifySearchParameters();
    }
    
    @Test
    public void testSearchJobsC3() throws Exception {
        runFlow("SearchJobsC3");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), eq(START), eq(COUNT));
        verifySearchParameters();
    }
    
    @Test
    public void testSearchJobsC4() throws Exception {
        runFlow("SearchJobsC4");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture());
        verifySearchParameters();
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
    }
    
    @Test
    public void testSearchJobsC5() throws Exception {
        runFlow("SearchJobsC5");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), eq(START), eq(COUNT));
        verifySearchParameters();
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
    }

    @Test
    public void testSearchJobsWithFacetsC1() throws Exception {
        runFlow("SearchJobsWithFacetsC1");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchJobsWithFacetsC2() throws Exception {
        runFlow("SearchJobsWithFacetsC2");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), eq(START), eq(COUNT), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchJobsWithFacetsC3() throws Exception {
        runFlow("SearchJobsWithFacetsC3");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchJobsWithFacetsC4() throws Exception {
        runFlow("SearchJobsWithFacetsC4");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), eq(START), eq(COUNT), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }

    @Test
    public void testSearchJobsWithFacetFieldsC1() throws Exception {
        runFlow("SearchJobsWithFacetFieldsC1");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), facetFieldsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
    }
    
    @Test
    public void testSearchJobsWithFacetFieldsC2() throws Exception {
        runFlow("SearchJobsWithFacetFieldsC2");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), facetFieldsCaptor.capture(), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    @Test
    public void testSearchJobsWithFacetFieldsC3() throws Exception {
        runFlow("SearchJobsWithFacetFieldsC3");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(START), eq(COUNT));
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
    }
    
    @Test
    public void testSearchJobsWithFacetFieldsC4() throws Exception {
        runFlow("SearchJobsWithFacetFieldsC4");
        verify(mockClient).searchJobs(searchParametersCaptor.capture(), jobFieldsCaptor.capture(), facetFieldsCaptor.capture(), eq(START), eq(COUNT), facetsCaptor.capture());
        verifySearchParameters();
        assertThat(facetFieldsCaptor.getValue()).containsOnly(facetFields.toArray());
        assertThat(jobFieldsCaptor.getValue()).containsOnly(jobFields.toArray());
        assertThat(facetsCaptor.getValue()).containsOnly(facets.toArray());
    }
    
    private void runFlow(String flowName) throws Exception {
        Flow flowConstruct = (Flow) muleContext.getRegistry().lookupFlowConstruct(flowName);
        flowConstruct.process(getTestEvent(""));
    }

    private void verifySearchParameters() {
        assertEquals(searchParameters.size(), searchParametersCaptor.getValue().size());
        for (Map.Entry<SearchParameter, String> entry : searchParameters.entrySet()) {
            assertThat(searchParametersCaptor.getValue()).includes(entry(entry.getKey(), entry.getValue()));
        }
    }
}
